// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/llravell/go-shortener/internal/usecase (interfaces: HealthRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHealthRepo is a mock of HealthRepo interface.
type MockHealthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockHealthRepoMockRecorder
}

// MockHealthRepoMockRecorder is the mock recorder for MockHealthRepo.
type MockHealthRepoMockRecorder struct {
	mock *MockHealthRepo
}

// NewMockHealthRepo creates a new mock instance.
func NewMockHealthRepo(ctrl *gomock.Controller) *MockHealthRepo {
	mock := &MockHealthRepo{ctrl: ctrl}
	mock.recorder = &MockHealthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthRepo) EXPECT() *MockHealthRepoMockRecorder {
	return m.recorder
}

// PingContext mocks base method.
func (m *MockHealthRepo) PingContext(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingContext", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingContext indicates an expected call of PingContext.
func (mr *MockHealthRepoMockRecorder) PingContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingContext", reflect.TypeOf((*MockHealthRepo)(nil).PingContext), arg0)
}
