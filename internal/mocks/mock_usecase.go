// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/llravell/go-shortener/internal/usecase (interfaces: URLRepo,HealthRepo,StatsRepo,HashGenerator)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/llravell/go-shortener/internal/entity"
)

// MockURLRepo is a mock of URLRepo interface.
type MockURLRepo struct {
	ctrl     *gomock.Controller
	recorder *MockURLRepoMockRecorder
}

// MockURLRepoMockRecorder is the mock recorder for MockURLRepo.
type MockURLRepoMockRecorder struct {
	mock *MockURLRepo
}

// NewMockURLRepo creates a new mock instance.
func NewMockURLRepo(ctrl *gomock.Controller) *MockURLRepo {
	mock := &MockURLRepo{ctrl: ctrl}
	mock.recorder = &MockURLRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLRepo) EXPECT() *MockURLRepoMockRecorder {
	return m.recorder
}

// DeleteMultipleURLs mocks base method.
func (m *MockURLRepo) DeleteMultipleURLs(arg0 context.Context, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMultipleURLs", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMultipleURLs indicates an expected call of DeleteMultipleURLs.
func (mr *MockURLRepoMockRecorder) DeleteMultipleURLs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultipleURLs", reflect.TypeOf((*MockURLRepo)(nil).DeleteMultipleURLs), arg0, arg1, arg2)
}

// GetURL mocks base method.
func (m *MockURLRepo) GetURL(arg0 context.Context, arg1 string) (*entity.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", arg0, arg1)
	ret0, _ := ret[0].(*entity.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockURLRepoMockRecorder) GetURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockURLRepo)(nil).GetURL), arg0, arg1)
}

// GetUserURLS mocks base method.
func (m *MockURLRepo) GetUserURLS(arg0 context.Context, arg1 string) ([]*entity.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserURLS", arg0, arg1)
	ret0, _ := ret[0].([]*entity.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserURLS indicates an expected call of GetUserURLS.
func (mr *MockURLRepoMockRecorder) GetUserURLS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserURLS", reflect.TypeOf((*MockURLRepo)(nil).GetUserURLS), arg0, arg1)
}

// Store mocks base method.
func (m *MockURLRepo) Store(arg0 context.Context, arg1 *entity.URL) (*entity.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0, arg1)
	ret0, _ := ret[0].(*entity.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockURLRepoMockRecorder) Store(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockURLRepo)(nil).Store), arg0, arg1)
}

// StoreMultipleURLs mocks base method.
func (m *MockURLRepo) StoreMultipleURLs(arg0 context.Context, arg1 []*entity.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMultipleURLs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMultipleURLs indicates an expected call of StoreMultipleURLs.
func (mr *MockURLRepoMockRecorder) StoreMultipleURLs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMultipleURLs", reflect.TypeOf((*MockURLRepo)(nil).StoreMultipleURLs), arg0, arg1)
}

// MockHealthRepo is a mock of HealthRepo interface.
type MockHealthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockHealthRepoMockRecorder
}

// MockHealthRepoMockRecorder is the mock recorder for MockHealthRepo.
type MockHealthRepoMockRecorder struct {
	mock *MockHealthRepo
}

// NewMockHealthRepo creates a new mock instance.
func NewMockHealthRepo(ctrl *gomock.Controller) *MockHealthRepo {
	mock := &MockHealthRepo{ctrl: ctrl}
	mock.recorder = &MockHealthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthRepo) EXPECT() *MockHealthRepoMockRecorder {
	return m.recorder
}

// PingContext mocks base method.
func (m *MockHealthRepo) PingContext(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingContext", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingContext indicates an expected call of PingContext.
func (mr *MockHealthRepoMockRecorder) PingContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingContext", reflect.TypeOf((*MockHealthRepo)(nil).PingContext), arg0)
}

// MockStatsRepo is a mock of StatsRepo interface.
type MockStatsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockStatsRepoMockRecorder
}

// MockStatsRepoMockRecorder is the mock recorder for MockStatsRepo.
type MockStatsRepoMockRecorder struct {
	mock *MockStatsRepo
}

// NewMockStatsRepo creates a new mock instance.
func NewMockStatsRepo(ctrl *gomock.Controller) *MockStatsRepo {
	mock := &MockStatsRepo{ctrl: ctrl}
	mock.recorder = &MockStatsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsRepo) EXPECT() *MockStatsRepoMockRecorder {
	return m.recorder
}

// GetURLsAmount mocks base method.
func (m *MockStatsRepo) GetURLsAmount(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLsAmount", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLsAmount indicates an expected call of GetURLsAmount.
func (mr *MockStatsRepoMockRecorder) GetURLsAmount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLsAmount", reflect.TypeOf((*MockStatsRepo)(nil).GetURLsAmount), arg0)
}

// GetUsersAmount mocks base method.
func (m *MockStatsRepo) GetUsersAmount(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersAmount", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersAmount indicates an expected call of GetUsersAmount.
func (mr *MockStatsRepoMockRecorder) GetUsersAmount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersAmount", reflect.TypeOf((*MockStatsRepo)(nil).GetUsersAmount), arg0)
}

// MockHashGenerator is a mock of HashGenerator interface.
type MockHashGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockHashGeneratorMockRecorder
}

// MockHashGeneratorMockRecorder is the mock recorder for MockHashGenerator.
type MockHashGeneratorMockRecorder struct {
	mock *MockHashGenerator
}

// NewMockHashGenerator creates a new mock instance.
func NewMockHashGenerator(ctrl *gomock.Controller) *MockHashGenerator {
	mock := &MockHashGenerator{ctrl: ctrl}
	mock.recorder = &MockHashGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHashGenerator) EXPECT() *MockHashGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockHashGenerator) Generate() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockHashGeneratorMockRecorder) Generate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockHashGenerator)(nil).Generate))
}
